{"version":3,"file":"static/js/412.1d714d96.chunk.js","mappings":"2RAWaA,EAAe,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,YAChCC,GAAeC,EAAAA,EAAAA,KAAfD,WAKR,OAHAE,QAAQC,IAAI,YAAaL,GACzBI,QAAQC,IAAI,aAAcH,IAGxB,UAAC,IAAD,CAAQI,EAAE,MAAV,UACG,IACAN,IACC,UAAC,IAAD,CACEO,aAAa,KACbC,OAAO,QACPC,GAAG,UACHC,MAAM,QACNC,MAAM,MACNC,OAAO,OACPC,GAAG,MAPL,WASE,SAAC,IAAD,KACA,SAAC,IAAD,CAAYC,GAAI,EAAhB,qBACA,SAAC,IAAD,kCACA,SAAC,IAAD,CAAQC,QAASd,EAAaS,MAAM,UAAUI,GAAG,OAAjD,wBAOT,E,2DCnCYE,EAAO,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACfC,GAAWC,EAAAA,EAAAA,MACXjB,GAAeC,EAAAA,EAAAA,KAAfD,WAiBN,OACE,+BACE,kBAAMkB,SAjBW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfN,GACEO,EAAAA,EAAAA,IAAS,CACPC,KAAMH,EAAKI,SAASD,KAAKE,MACzBC,MAAON,EAAKI,SAASE,MAAMD,MAC3BE,SAAUP,EAAKI,SAASG,SAASF,SAGrCL,EAAKQ,QACL3B,QAAQC,IAAI,aAAcH,GAC1Be,GAAa,EACd,EAIG,WACE,UAAC,KAAD,CAAae,YAAU,EAAvB,WACE,SAAC,IAAD,wBACA,SAAC,EAAAC,EAAD,CAAOC,KAAK,OAAOR,KAAK,OAAOS,aAAa,SAE9C,UAAC,KAAD,CAAaH,YAAU,EAAvB,WACE,SAAC,IAAD,qBACA,SAAC,EAAAC,EAAD,CAAOC,KAAK,QAAQR,KAAK,QAAQS,aAAa,SAEhD,UAAC,KAAD,CAAaH,YAAU,EAAvB,WACE,SAAC,IAAD,wBACA,SAAC,EAAAC,EAAD,CAAOC,KAAK,WAAWR,KAAK,WAAWS,aAAa,SAEtD,SAAC,IAAD,CACED,KAAK,SACLE,WAAW,oCACXC,UAAU,OAHZ,0BAUP,E,UC3CYC,EAAe,WAC1B,OAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAKvC,EAAL,KAAgBiB,EAAhB,KAEQf,GAAeC,EAAAA,EAAAA,KAAfD,WAMR,OACE,iCACE,SAACc,EAAD,CAAMC,aAAcA,IACJ,KAAff,IACCsC,EAAAA,EAAAA,eACE,SAACzC,EAAD,CAAcC,UAAWA,EAAWC,YATxB,WAClBgB,GAAa,EACd,IAQOwB,SAASC,QAIlB,ECtBc,SAASC,IACtB,OACE,UAAC,KAAD,YACE,SAAC,KAAD,WACE,+CAEF,SAACL,EAAD,MAGL,C,uHCPGM,GAASC,EAAAA,EAAAA,GAAO,MAAO,CACzBC,UAAW,CACTC,QAAS,OACTC,WAAY,SACZC,eAAgB,YAGpBL,EAAOM,YAAc,SACrB,IAAIC,EAAe,CACjBC,WAAY,CACVC,WAAY,MACZC,UAAW,oBAEbC,SAAU,CACRC,IAAK,MACLF,UAAW,oBAEbG,KAAM,CACJJ,WAAY,MACZG,IAAK,MACLF,UAAW,2BAGMI,EAAAA,EAAAA,IACnB,SAAyBC,EAAOC,GAC9B,MAAmCD,EAA3BE,KAAAA,OAAR,MAAe,OAAf,EAA0BC,GAA1B,OAAmCH,EAAnC,GACA,OAAuBI,EAAAA,EAAAA,KACrBlB,EAAAA,EAAAA,KADwB,gBAGtBe,IAAAA,EACA,MAAOT,EAAaU,IACjBC,GALmB,IAMtB,SAAU,aAGf,G","sources":["components/RegisterForm/MessageError.js","components/RegisterForm/Form.js","components/RegisterForm/RegisterForm.js","pages/Register.js","../node_modules/@chakra-ui/layout/src/center.tsx"],"sourcesContent":["import { useAuth } from 'hooks';\n\nimport {\n  Alert,\n  AlertIcon,\n  AlertDescription,\n  AlertTitle,\n  Center,\n  Button,\n} from '@chakra-ui/react';\n\nexport const MessageError = ({ isVisible, handleClose }) => {\n  const { isLoggedIn } = useAuth();\n\n  console.log('isVisible', isVisible);\n  console.log('IsLoggedIn', isLoggedIn);\n\n  return (\n    <Center h=\"5vh\">\n      {' '}\n      {isVisible && (\n        <Alert\n          borderRadius=\"md\"\n          status=\"error\"\n          bg=\"red.200\"\n          color=\"white\"\n          width=\"20%\"\n          height=\"65px\"\n          br=\"4px\"\n        >\n          <AlertIcon />\n          <AlertTitle mr={2}>Error!</AlertTitle>\n          <AlertDescription>Oops...do it again</AlertDescription>\n          <Button onClick={handleClose} color=\"red.200\" mr=\"auto\">\n            Close\n          </Button>\n        </Alert>\n      )}\n    </Center>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { useAuth } from 'hooks';\nimport { FormControl, FormLabel, Input, Button } from '@chakra-ui/react';\n\nexport const Form = ({ setIsVisible }) => {\n  const dispatch = useDispatch();\n  let { isLoggedIn } = useAuth();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      register({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n    console.log('isLoggedIn', isLoggedIn);\n    setIsVisible(true);\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <FormControl isRequired>\n          <FormLabel>Username</FormLabel>\n          <Input type=\"text\" name=\"name\" autoComplete=\"\" />\n        </FormControl>\n        <FormControl isRequired>\n          <FormLabel>Email</FormLabel>\n          <Input type=\"email\" name=\"email\" autoComplete=\"\" />\n        </FormControl>\n        <FormControl isRequired>\n          <FormLabel>Password</FormLabel>\n          <Input type=\"password\" name=\"password\" autoComplete=\"\" />\n        </FormControl>\n        <Button\n          type=\"submit\"\n          bgGradient=\"linear(to-r, #a2b4fb, yellow.100)\"\n          marginTop=\"10px\"\n        >\n          Register\n        </Button>\n      </form>\n    </>\n  );\n};\n","import { useAuth } from 'hooks';\nimport { MessageError } from './MessageError';\nimport { createPortal } from 'react-dom';\nimport { Form } from './Form';\nimport { useState } from 'react';\n\nexport const RegisterForm = () => {\n  let [isVisible, setIsVisible] = useState(true);\n\n  const { isLoggedIn } = useAuth();\n\n  const handleClose = () => {\n    setIsVisible(false);\n  };\n\n  return (\n    <>\n      <Form setIsVisible={setIsVisible} />\n      {isLoggedIn === '' &&\n        createPortal(\n          <MessageError isVisible={isVisible} handleClose={handleClose} />,\n          document.body\n        )}\n    </>\n  );\n};\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </HelmetProvider>\n  );\n}\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\n\nexport interface CenterProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * React component used to horizontally and vertically center its child.\n * It uses the popular `display: flex` centering technique.\n *\n * @see Docs https://chakra-ui.com/center\n */\nexport const Center = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n})\n\nCenter.displayName = \"Center\"\n\nexport interface AbsoluteCenterProps extends HTMLChakraProps<\"div\"> {\n  axis?: \"horizontal\" | \"vertical\" | \"both\"\n}\n\nconst centerStyles = {\n  horizontal: {\n    insetStart: \"50%\",\n    transform: \"translateX(-50%)\",\n  },\n  vertical: {\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n  },\n  both: {\n    insetStart: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n}\n\n/**\n * React component used to horizontally and vertically center an element\n * relative to its parent dimensions.\n *\n * It uses the `position: absolute` strategy.\n *\n * @see Docs https://chakra-ui.com/center\n * @see WebDev https://web.dev/centering-in-css/#5.-pop-and-plop\n */\nexport const AbsoluteCenter = forwardRef<AbsoluteCenterProps, \"div\">(\n  function AbsoluteCenter(props, ref) {\n    const { axis = \"both\", ...rest } = props\n    return (\n      <chakra.div\n        ref={ref}\n        __css={centerStyles[axis]}\n        {...rest}\n        position=\"absolute\"\n      />\n    )\n  },\n)\n"],"names":["MessageError","isVisible","handleClose","isLoggedIn","useAuth","console","log","h","borderRadius","status","bg","color","width","height","br","mr","onClick","Form","setIsVisible","dispatch","useDispatch","onSubmit","e","preventDefault","form","currentTarget","register","name","elements","value","email","password","reset","isRequired","I","type","autoComplete","bgGradient","marginTop","RegisterForm","useState","createPortal","document","body","Register","baseStyle","chakra","display","alignItems","justifyContent","displayName","centerStyles","horizontal","insetStart","transform","vertical","top","both","AbsoluteCenter","forwardRef","axis","rest","div","__css","Center"],"sourceRoot":""}