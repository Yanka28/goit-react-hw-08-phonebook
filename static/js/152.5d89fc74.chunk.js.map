{"version":3,"file":"static/js/152.5d89fc74.chunk.js","mappings":"qSASaA,EAAe,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,YACxC,OACE,SAAC,IAAD,CAAQC,EAAE,MAAV,SACGF,IACC,UAAC,IAAD,CACEG,aAAa,KACbC,OAAO,QACPC,GAAG,UACHC,MAAM,QACNC,MAAM,MACNC,OAAO,OACPC,GAAG,MAPL,WASE,SAAC,IAAD,KACA,SAAC,IAAD,CAAYC,GAAI,EAAhB,qBACA,SAAC,IAAD,6EAGA,SAAC,IAAD,CAAQC,QAASV,EAAaK,MAAM,UAAUI,GAAG,OAAjD,uBAOT,E,2DC9BYE,EAAO,WAClB,IAAMC,GAAWC,EAAAA,EAAAA,MAcjB,OACE,kBAAMC,SAba,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfN,GACEO,EAAAA,EAAAA,IAAM,CACJC,MAAOH,EAAKI,SAASD,MAAME,MAC3BC,SAAUN,EAAKI,SAASE,SAASD,SAGrCL,EAAKO,OACN,EAG+BC,aAAa,MAA3C,WACE,UAAC,KAAD,CAAaC,YAAU,EAAvB,WACE,SAAC,IAAD,sBACA,SAAC,EAAAC,EAAD,CAAOC,KAAK,QAAQC,KAAK,QAAQJ,aAAa,cAEhD,UAAC,KAAD,CAAaC,YAAU,EAAvB,WACE,SAAC,IAAD,yBACA,SAAC,EAAAC,EAAD,CACEC,KAAK,WACLC,KAAK,WACLJ,aAAa,yBAGjB,SAAC,IAAD,CAAQG,KAAK,SAASE,WAAW,qCAAjC,sBAKL,EChCYC,EAAY,WACvB,OAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAKjC,EAAL,KAAgBkC,EAAhB,KACQC,GAAeC,EAAAA,EAAAA,KAAfD,WAOR,OAFAE,QAAQC,IAAI,aAAcH,GAC1BE,QAAQC,IAAI,aAActC,IAExB,iCACE,SAACY,EAAD,CAAMsB,aAAcA,IACJ,KAAfC,IACCI,EAAAA,EAAAA,eACE,SAACxC,EAAD,CAAcC,UAAWA,EAAWC,YAVxB,WAClBiC,GAAa,EACd,IASOM,SAASC,QAIlB,ECtBc,SAASC,IACtB,OACE,UAAC,KAAD,YACE,SAAC,KAAD,WACE,wCAEF,SAACV,EAAD,MAGL,C,uHCPGW,GAASC,EAAAA,EAAAA,GAAO,MAAO,CACzBC,UAAW,CACTC,QAAS,OACTC,WAAY,SACZC,eAAgB,YAGpBL,EAAOM,YAAc,SACrB,IAAIC,EAAe,CACjBC,WAAY,CACVC,WAAY,MACZC,UAAW,oBAEbC,SAAU,CACRC,IAAK,MACLF,UAAW,oBAEbG,KAAM,CACJJ,WAAY,MACZG,IAAK,MACLF,UAAW,2BAGMI,EAAAA,EAAAA,IACnB,SAAyBC,EAAOC,GAC9B,MAAmCD,EAA3BE,KAAAA,OAAR,MAAe,OAAf,EAA0BC,GAA1B,OAAmCH,EAAnC,GACA,OAAuBI,EAAAA,EAAAA,KACrBlB,EAAAA,EAAAA,KADwB,gBAGtBe,IAAAA,EACA,MAAOT,EAAaU,IACjBC,GALmB,IAMtB,SAAU,aAGf,G","sources":["components/LoginForm/MessageError.js","components/LoginForm/Form.js","components/LoginForm/LoginForm.js","pages/Login.js","../node_modules/@chakra-ui/layout/src/center.tsx"],"sourcesContent":["import {\n  Alert,\n  AlertIcon,\n  AlertDescription,\n  AlertTitle,\n  Button,\n  Center,\n} from '@chakra-ui/react';\n\nexport const MessageError = ({ isVisible, handleClose }) => {\n  return (\n    <Center h=\"5vh\">\n      {isVisible && (\n        <Alert\n          borderRadius=\"md\"\n          status=\"error\"\n          bg=\"red.200\"\n          color=\"white\"\n          width=\"30%\"\n          height=\"65px\"\n          br=\"4px\"\n        >\n          <AlertIcon />\n          <AlertTitle mr={2}>Error!</AlertTitle>\n          <AlertDescription>\n            Oops... such user does not exist or the password is incorrect\n          </AlertDescription>\n          <Button onClick={handleClose} color=\"red.200\" mr=\"auto\">\n            Close\n          </Button>\n        </Alert>\n      )}\n    </Center>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport { FormControl, FormLabel, Input, Button } from '@chakra-ui/react';\n\nexport const Form = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"off\">\n      <FormControl isRequired>\n        <FormLabel>Email </FormLabel>\n        <Input type=\"email\" name=\"email\" autoComplete=\"email\" />\n      </FormControl>\n      <FormControl isRequired>\n        <FormLabel>Password </FormLabel>\n        <Input\n          type=\"password\"\n          name=\"password\"\n          autoComplete=\"current-password\"\n        />\n      </FormControl>\n      <Button type=\"submit\" bgGradient=\"linear(to-r,  #a2b4fb, yellow.100)\">\n        Log In\n      </Button>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport { useAuth } from 'hooks';\nimport { MessageError } from './MessageError';\nimport { createPortal } from 'react-dom';\nimport { Form } from './Form';\n\nexport const LoginForm = () => {\n  let [isVisible, setIsVisible] = useState(true);\n  const { isLoggedIn } = useAuth();\n\n  const handleClose = () => {\n    setIsVisible(false);\n  };\n  console.log('isLoggedIn', isLoggedIn);\n  console.log('isVisible,', isVisible);\n  return (\n    <>\n      <Form setIsVisible={setIsVisible} />\n      {isLoggedIn === '' &&\n        createPortal(\n          <MessageError isVisible={isVisible} handleClose={handleClose} />,\n          document.body\n        )}\n    </>\n  );\n};\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </HelmetProvider>\n  );\n}\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\n\nexport interface CenterProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * React component used to horizontally and vertically center its child.\n * It uses the popular `display: flex` centering technique.\n *\n * @see Docs https://chakra-ui.com/center\n */\nexport const Center = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n})\n\nCenter.displayName = \"Center\"\n\nexport interface AbsoluteCenterProps extends HTMLChakraProps<\"div\"> {\n  axis?: \"horizontal\" | \"vertical\" | \"both\"\n}\n\nconst centerStyles = {\n  horizontal: {\n    insetStart: \"50%\",\n    transform: \"translateX(-50%)\",\n  },\n  vertical: {\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n  },\n  both: {\n    insetStart: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n}\n\n/**\n * React component used to horizontally and vertically center an element\n * relative to its parent dimensions.\n *\n * It uses the `position: absolute` strategy.\n *\n * @see Docs https://chakra-ui.com/center\n * @see WebDev https://web.dev/centering-in-css/#5.-pop-and-plop\n */\nexport const AbsoluteCenter = forwardRef<AbsoluteCenterProps, \"div\">(\n  function AbsoluteCenter(props, ref) {\n    const { axis = \"both\", ...rest } = props\n    return (\n      <chakra.div\n        ref={ref}\n        __css={centerStyles[axis]}\n        {...rest}\n        position=\"absolute\"\n      />\n    )\n  },\n)\n"],"names":["MessageError","isVisible","handleClose","h","borderRadius","status","bg","color","width","height","br","mr","onClick","Form","dispatch","useDispatch","onSubmit","e","preventDefault","form","currentTarget","logIn","email","elements","value","password","reset","autoComplete","isRequired","I","type","name","bgGradient","LoginForm","useState","setIsVisible","isLoggedIn","useAuth","console","log","createPortal","document","body","Login","baseStyle","chakra","display","alignItems","justifyContent","displayName","centerStyles","horizontal","insetStart","transform","vertical","top","both","AbsoluteCenter","forwardRef","axis","rest","div","__css","Center"],"sourceRoot":""}